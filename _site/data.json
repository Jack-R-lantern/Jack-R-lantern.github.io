[{"permalink":"/ComputerScience/DataStructure/List/","layout":"default","title":null,"content":"","dir":"/ComputerScience/DataStructure/List/","name":"README.md","path":"ComputerScience/DataStructure/List/README.md","url":"/ComputerScience/DataStructure/List/"},{"permalink":"//","layout":"default","title":"Jack-R-lantern Blog","content":"# Jack-R-lantern Blog\n## Introduce\n### **Programming**\n<img src=\"https://img.shields.io/badge/C-3A4CA5?style=flat-square&logo=c&logoColor=white\"/>\n<img src=\"https://img.shields.io/badge/C++-3480C7?style=flat-square&logo=C%2B%2B&logoColor=white\"/>\n<img src=\"https://img.shields.io/badge/Go-00ADD8?style=flat-square&logo=Go&logoColor=white\"/>\n<img src=\"https://img.shields.io/badge/Rust-000000?style=flat-square&logo=Rust&logoColor=white\"/>\n<img src=\"https://img.shields.io/badge/TypeScript-3178c6?style=flat-square&logo=TypeScript&logoColor=white\"/>\n\n### **Environment**\n<img src=\"https://img.shields.io/badge/Ubuntu-E95420?style=flat-square&logo=Ubuntu&logoColor=white\"/>\n<img src=\"https://img.shields.io/badge/Alpine Linux-0d597f?style=flat-square&logo=Alpine Linux&logoColor=white\"/>\n<img src=\"https://img.shields.io/badge/macOS-000000?style=flat-square&logo=macOS&logoColor=white\"/>\n<img src=\"https://img.shields.io/badge/Github-181717?style=flat-square&logo=Github&logoColor=white\"/>\n\n### **DevOps**\n<img src=\"https://img.shields.io/badge/Docker-2496ed?style=flat-square&logo=Docker&logoColor=white\"/>\n<img src=\"https://img.shields.io/badge/AWS-232F3E?style=flat-square&logo=Amazon AWS&logoColor=white\"/>\n<img src=\"https://img.shields.io/badge/Terraform-7B42BC?style=flat-square&logo=Terraform&logoColor=white\"/>\n<img src=\"https://img.shields.io/badge/Github Actions-2088FF?style=flat-square&logo=Github Actions&logoColor=white\"/>\n<img src=\"https://img.shields.io/badge/Codecov-f01f7a?style=flat-square&logo=codecov&logoColor=white\"/>\n<img src=\"https://img.shields.io/badge/SonarCloud-f3702a?style=flat-square&logo=sonarcloud&logoColor=white\"/>\n\n### **Database**\n<img src=\"https://img.shields.io/badge/MariaDB-003545?style=flat-square&logo=MariaDB&logoColor=white\"/>\n<img src=\"https://img.shields.io/badge/PostgreSQL-4169e1?style=flat-square&logo=postgresql&logoColor=white\"/>","dir":"/","name":"README.md","path":"README.md","url":"/"},{"layout":"default","title":"Jekyll","content":"# **Jekyll**\n\n## **목표**\n* github.io를 이용하기 위한 Jekyll환경 구축.\n* githubpage에서 사용하기 위한 ruby2.7 버전을 이용.\n* 테마의 경우 유저마다 다름으로 Jekyll, bundler만 설치\n\n## **발생한 문제**\n* `Jekyll` 설치 시 에러 발생 및 `mkmf.log`확인.\n![first_error_log](/assets/images/DevelopmentEnvironment/Jekyll2.jpg)\n`gcc`가 없어서 발생하는 문제임을 확인. \\\n`apk add gcc`를 이용해 `gcc`설치.\n* `gcc`설치 이후 다른 에러가 발생 및 `mkmf.log`확인.\n![second_error_log](/assets/images/DevelopmentEnvironment/Jekyll3.jpg)\n`libc`가 없어서 발생하는 문제임을 확인. \\\n`glibc`를 설치하려고 했으나 실패. \\\nhttps://www.lesstif.com/docker/alpine-linux-35356819.html 를 참조하여 `musl-dev` 설치\n* `musl-dev`설치 이후 다른 에러 발생\n![third_error_log](/assets/images/DevelopmentEnvironment/Jekyll4.jpg)\n`Make`설치\n* `Make` 설치 이후 다른 에러 발생\n![fourth_error_log](/assets/images/DevelopmentEnvironment/Jekyll5.jpg)\n`g++`이 없어서 발생하는 에러, `g++`설치\n\n## **Dockerfile**\n발생한 문제들을 기반으로 필요한 패키지를 `Dockerfile`에 기입.\n```dockerfile\nFROM ruby:2.7-alpine\n\n# preinstall for jekyll\nRUN apk update \\\n&& apk add --no-cache \\\n\tgcc \\\n\tg++ \\\n\tgit \\\n\tmake \\\n\tmusl-dev \\\n\tvim\n\n# install jekyll & bundle\nRUN gem install jekyll bundler\n\nEXPOSE\t4000\n\nCMD [ \"/bin/ash\" ]\n```\n\n## **흥미로운 점**\n`libc`와 관련해 모든 `linux`에서 패키지 관리자로 `glibc`를 설치 할 수 있을거라고 생각했음. \\\n`alpine`같은 경우 `apk add glibc`를 입력하면 패키지를 찾을수 없다는 결과 발생. \\\n`glibc`와 `musl-dev`의 `libc`프론트 코드의 차이에 대해 궁금해짐.\n","dir":"/Project/DevlopmentEnviroment/","name":"Jekyll.md","path":"Project/DevlopmentEnviroment/Jekyll.md","url":"/Project/DevlopmentEnviroment/Jekyll.html"},{"layout":"default","title":"Clang","content":"# Clang\n\n## compile option\n```\nOVERVIEW: clang LLVM compiler\n\nUSAGE: clang [options] file...\n\nOPTIONS:\n -### Print (but do not run) the commands to run for this compilation\n --analyzer-output <value>\n Static analyzer report output format (html|plist|plist-multi-file|plist-html|sarif|text).\n --analyze Run the static analyzer\n -arcmt-migrate-emit-errors\n Emit ARC errors even if the migrator can fix them\n -arcmt-migrate-report-output <value>\n Output path for the plist report\n -B <dir> Add <dir> to search path for binaries and object files used implicitly\n -CC Include comments from within macros in preprocessed output\n -cl-denorms-are-zero OpenCL only. Allow denormals to be flushed to zero.\n -cl-fast-relaxed-math OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__.\n -cl-finite-math-only OpenCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf.\n -cl-fp32-correctly-rounded-divide-sqrt\n OpenCL only. Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded.\n -cl-kernel-arg-info OpenCL only. Generate kernel argument metadata.\n -cl-mad-enable OpenCL only. Allow use of less precise MAD computations in the generated binary.\n -cl-no-signed-zeros OpenCL only. Allow use of less precise no signed zeros computations in the generated binary.\n -cl-opt-disable OpenCL only. This option disables all optimizations. By default optimizations are enabled.\n -cl-single-precision-constant\n OpenCL only. Treat double precision floating-point constant as single precision constant.\n -cl-std=<value> OpenCL language standard to compile for.\n -cl-strict-aliasing OpenCL only. This option is added for compatibility with OpenCL 1.0.\n -cl-uniform-work-group-size\n OpenCL only. Defines that the global work-size be a multiple of the work-group size specified to clEnqueueNDRangeKernel\n -cl-unsafe-math-optimizations\n OpenCL only. Allow unsafe floating-point optimizations. Also implies -cl-no-signed-zeros and -cl-mad-enable.\n --config <value> Specifies configuration file\n --cuda-compile-host-device\n Compile CUDA code for both host and device (default). Has no effect on non-CUDA compilations.\n --cuda-device-only Compile CUDA code for device only\n --cuda-host-only Compile CUDA code for host only. Has no effect on non-CUDA compilations.\n --cuda-include-ptx=<value>\n Include PTX for the following GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.\n --cuda-noopt-device-debug\n Enable device-side debug info generation. Disables ptxas optimizations.\n --cuda-path-ignore-env Ignore environment variables to detect CUDA installation\n --cuda-path=<value> CUDA installation path\n -cxx-isystem <directory>\n Add directory to the C++ SYSTEM include search path\n -C Include comments in preprocessed output\n -c Only run preprocess, compile, and assemble steps\n -dD Print macro definitions in -E mode in addition to normal output\n -dependency-dot <value> Filename to write DOT-formatted header dependencies to\n -dependency-file <value>\n Filename (or -) to write dependency output to\n -dI Print include directives in -E mode in addition to normal output\n -dM Print macro definitions in -E mode instead of normal output\n -D <macro>=<value> Define <macro> to <value> (or 1 if <value> omitted)\n -emit-ast Emit Clang AST files for source inputs\n -emit-interface-stubs Generate Inteface Stub Files.\n -emit-llvm Use the LLVM representation for assembler and object files\n -emit-merged-ifs Generate Interface Stub Files, emit merged text not binary.\n --emit-static-lib Enable linker job to emit a static library.\n -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang\n Trivial automatic variable initialization to zero is only here for benchmarks, it'll eventually be removed, and I'm OK with that because I'm only using it to benchmark\n -E Only run the preprocessor\n -fAAPCSBitfieldLoad Follows the AAPCS standard that all volatile bit-field write generates at least one load. (ARM only).\n -faddrsig Emit an address-significance table\n -faligned-allocation Enable C++17 aligned allocation functions\n -fallow-editor-placeholders\n Treat editor placeholders as valid source code\n -fansi-escape-codes Use ANSI escape codes for diagnostics\n -fapinotes-cache-path=<directory>\n Does nothing; API notes are no longer cached separately from modules\n -fapinotes-modules Enable module-based external API notes support\n -fapinotes-swift-version=<version>\n Specify the Swift version to use when filtering API notes\n -fapinotes Enable external API notes support\n -fapple-kext Use Apple's kernel extensions ABI\n -fapple-link-rtlib Force linking the clang builtins runtime library\n -fapple-pragma-pack Enable Apple gcc-compatible #pragma pack handling\n -fapplication-extension Restrict code to those available for App Extensions\n -fasm-blocks \n -fautolink \n -fbasic-block-sections=<value>\n Place each function's basic blocks in unique sections (ELF Only) : all | labels | none | list=<file>\n -fblocks Enable the 'blocks' language feature\n -fborland-extensions Accept non-standard constructs supported by the Borland compiler\n -fbranch-target-identification\n Emit branch target identification instructions for indirect branch destinations\n -fbuild-session-file=<file>\n Use the last modification time of <file> as the build session timestamp\n -fbuild-session-timestamp=<time since Epoch in seconds>\n Time when the current build session started\n -fbuiltin-module-map Load the clang builtins module map file.\n -fc++-static-destructors\n \n -fcall-saved-x10 Make the x10 register call-saved (AArch64 only)\n -fcall-saved-x11 Make the x11 register call-saved (AArch64 only)\n -fcall-saved-x12 Make the x12 register call-saved (AArch64 only)\n -fcall-saved-x13 Make the x13 register call-saved (AArch64 only)\n -fcall-saved-x14 Make the x14 register call-saved (AArch64 only)\n -fcall-saved-x15 Make the x15 register call-saved (AArch64 only)\n -fcall-saved-x18 Make the x18 register call-saved (AArch64 only)\n -fcall-saved-x8 Make the x8 register call-saved (AArch64 only)\n -fcall-saved-x9 Make the x9 register call-saved (AArch64 only)\n -fcaret-diagnostics \n -fcf-protection=<value> Instrument control-flow architecture protection. Options: return, branch, full, none.\n -fcf-protection Enable cf-protection in 'full' mode\n -fchar8_t Enable C++ builtin type char8_t\n -fclang-abi-compat=<version>\n Attempt to match the ABI of Clang <version>\n -fcolor-diagnostics Enable colors in diagnostics\n -fcomment-block-commands=<arg>\n Treat each comma separated argument in <arg> as a documentation comment block command\n -fcommon Place uninitialized global variables in a common block\n -fcomplete-member-pointers\n Require member pointer base types to be complete if they would be significant under the Microsoft ABI\n -fconvergent-functions Assume functions may be convergent\n -fcoroutines-ts Enable support for the C++ Coroutines TS\n -fcoverage-mapping Generate coverage mapping to enable code coverage analysis\n -fcs-profile-generate=<directory>\n Generate instrumented code to collect context sensitive execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)\n -fcs-profile-generate Generate instrumented code to collect context sensitive execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)\n -fcuda-approx-transcendentals\n Use approximate transcendental functions\n -fcuda-flush-denormals-to-zero\n Flush denormal floating point values to zero in CUDA device mode.\n -fcuda-short-ptr Use 32-bit pointers for accessing const/local/shared address spaces\n -fcxx-exceptions Enable C++ exceptions\n -fdata-sections Place each data in its own section\n -fdebug-compilation-dir <value>\n The compilation directory to embed in the debug info.\n -fdebug-default-version=<value>\n Default DWARF version to use, if a -g option caused DWARF debug info to be produced\n -fdebug-info-for-profiling\n Emit extra debug info to make sample profile more accurate\n -fdebug-macro Emit macro debug information\n -fdebug-prefix-map=<value>\n remap file source paths in debug info\n -fdebug-ranges-base-address\n Use DWARF base address selection entries in .debug_ranges\n -fdebug-types-section Place debug types in their own section (ELF Only)\n -fdeclspec Allow __declspec as a keyword\n -fdelayed-template-parsing\n Parse templated function definitions at the end of the translation unit\n -fdelete-null-pointer-checks\n Treat usage of null pointers as undefined behavior (default)\n -fdiagnostics-absolute-paths\n Print absolute paths in diagnostics\n -fdiagnostics-hotness-threshold=<number>\n Prevent optimization remarks from being output if they do not have at least this profile count\n -fdiagnostics-parseable-fixits\n Print fix-its in machine parseable form\n -fdiagnostics-print-source-range-info\n Print source range spans in numeric form\n -fdiagnostics-show-hotness\n Enable profile hotness information in diagnostic line\n -fdiagnostics-show-note-include-stack\n Display include stacks for diagnostic notes\n -fdiagnostics-show-option\n Print option name with mappable diagnostics\n -fdiagnostics-show-template-tree\n Print a template comparison tree for differing templates\n -fdigraphs Enable alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:' (default)\n -fdiscard-value-names Discard value names in LLVM IR\n -fdollars-in-identifiers\n Allow '$' in identifiers\n -fdouble-square-bracket-attributes\n Enable '[[]]' attributes in all C and C++ language modes\n -fdwarf-directory-asm \n -fdwarf-exceptions Use DWARF style exceptions\n -fembed-bitcode-marker Embed placeholder LLVM IR data as a marker\n -fembed-bitcode=<option>\n Embed LLVM bitcode (option: off, all, bitcode, marker)\n -fembed-bitcode Embed LLVM IR bitcode as data\n -femit-all-decls Emit all declarations, even if unused\n -femulated-tls Use emutls functions to access thread_local variables\n -fenable-globaldse Enable experimental global dead store elimination\n -fenable-matrix Enable matrix data type and related builtin functions\n -fexceptions Enable support for exception handling\n -fexperimental-new-constant-interpreter\n Enable the experimental new constant interpreter\n -fexperimental-new-pass-manager\n Enables an experimental new pass manager in LLVM.\n -fexperimental-relative-c++-abi-vtables\n Use the experimental C++ class ABI for classes with virtual tables\n -fexperimental-strict-floating-point\n Enables experimental strict floating point in LLVM.\n -ffast-math Allow aggressive, lossy floating-point optimizations\n -ffile-prefix-map=<value>\n remap file source paths in debug info and predefined preprocessor macros\n -ffine-grained-bitfield-accesses\n Use separate accesses for consecutive bitfield runs with legal widths and alignments.\n -ffixed-point Enable fixed point types\n -ffixed-r19 Reserve register r19 (Hexagon only)\n -ffixed-r9 Reserve the r9 register (ARM only)\n -ffixed-x10 Reserve the x10 register (AArch64/RISC-V only)\n -ffixed-x11 Reserve the x11 register (AArch64/RISC-V only)\n -ffixed-x12 Reserve the x12 register (AArch64/RISC-V only)\n -ffixed-x13 Reserve the x13 register (AArch64/RISC-V only)\n -ffixed-x14 Reserve the x14 register (AArch64/RISC-V only)\n -ffixed-x15 Reserve the x15 register (AArch64/RISC-V only)\n -ffixed-x16 Reserve the x16 register (AArch64/RISC-V only)\n -ffixed-x17 Reserve the x17 register (AArch64/RISC-V only)\n -ffixed-x18 Reserve the x18 register (AArch64/RISC-V only)\n -ffixed-x19 Reserve the x19 register (AArch64/RISC-V only)\n -ffixed-x1 Reserve the x1 register (AArch64/RISC-V only)\n -ffixed-x20 Reserve the x20 register (AArch64/RISC-V only)\n -ffixed-x21 Reserve the x21 register (AArch64/RISC-V only)\n -ffixed-x22 Reserve the x22 register (AArch64/RISC-V only)\n -ffixed-x23 Reserve the x23 register (AArch64/RISC-V only)\n -ffixed-x24 Reserve the x24 register (AArch64/RISC-V only)\n -ffixed-x25 Reserve the x25 register (AArch64/RISC-V only)\n -ffixed-x26 Reserve the x26 register (AArch64/RISC-V only)\n -ffixed-x27 Reserve the x27 register (AArch64/RISC-V only)\n -ffixed-x28 Reserve the x28 register (AArch64/RISC-V only)\n -ffixed-x29 Reserve the x29 register (AArch64/RISC-V only)\n -ffixed-x2 Reserve the x2 register (AArch64/RISC-V only)\n -ffixed-x30 Reserve the x30 register (AArch64/RISC-V only)\n -ffixed-x31 Reserve the x31 register (AArch64/RISC-V only)\n -ffixed-x3 Reserve the x3 register (AArch64/RISC-V only)\n -ffixed-x4 Reserve the x4 register (AArch64/RISC-V only)\n -ffixed-x5 Reserve the x5 register (AArch64/RISC-V only)\n -ffixed-x6 Reserve the x6 register (AArch64/RISC-V only)\n -ffixed-x7 Reserve the x7 register (AArch64/RISC-V only)\n -ffixed-x8 Reserve the x8 register (AArch64/RISC-V only)\n -ffixed-x9 Reserve the x9 register (AArch64/RISC-V only)\n -fforce-dwarf-frame Always emit a debug frame section\n -fforce-emit-vtables Emits more virtual tables to improve devirtualization\n -fforce-enable-int128 Enable support for int128_t type\n -ffp-contract=<value> Form fused FP ops (e.g. FMAs): fast (everywhere) | on (according to FP_CONTRACT pragma) | off (never fuse). Default is 'fast' for CUDA/HIP and 'on' otherwise.\n -ffp-exception-behavior=<value>\n Specifies the exception behavior of floating-point operations.\n -ffp-model=<value> Controls the semantics of floating-point calculations.\n -ffreestanding Assert that the compilation takes place in a freestanding environment\n -ffunction-sections Place each function in its own section\n -fglobal-isel Enables the global instruction selector\n -fgnu-inline-asm \n -fgnu-keywords Allow GNU-extension keywords regardless of language standard\n -fgnu-runtime Generate output compatible with the standard GNU Objective-C runtime\n -fgnu89-inline Use the gnu89 inline semantics\n -fgnuc-version=<value> Sets various macros to claim compatibility with the given GCC version (default is 4.2.1)\n -fgpu-allow-device-init Allow device side init function in HIP\n -fgpu-rdc Generate relocatable device code, also known as separate compilation mode\n -fhip-new-launch-api Use new kernel launching API for HIP\n -fignore-exceptions Enable support for ignoring exception handling constructs\n -fimplicit-module-maps Implicitly search the file system for module map files.\n -finline-functions Inline suitable functions\n -finline-hint-functions Inline functions which are (explicitly or implicitly) marked inline\n -finstrument-function-entry-bare\n Instrument function entry only, after inlining, without arguments to the instrumentation call\n -finstrument-functions-after-inlining\n Like -finstrument-functions, but insert the calls after inlining\n -finstrument-functions Generate calls to instrument function entry and exit\n -fintegrated-as Enable the integrated assembler\n -fintegrated-cc1 Run cc1 in-process\n -fjump-tables Use jump tables for lowering switches\n -fkeep-static-consts Keep static const variables if unused\n -flax-vector-conversions=<value>\n Enable implicit vector bit-casts\n -flto-jobs=<value> Controls the backend parallelism of -flto=thin (default of 0 means the number of threads will be derived from the number of CPUs detected)\n -flto=<value> Set LTO mode to either 'full' or 'thin'\n -flto Enable LTO in 'full' mode\n -fmacro-prefix-map=<value>\n remap file source paths in predefined preprocessor macros\n -fmath-errno Require math functions to indicate errors by setting errno\n -fmax-tokens=<value> Max total number of preprocessed tokens for -Wmax-tokens.\n -fmax-type-align=<value>\n Specify the maximum alignment to enforce on pointers lacking an explicit alignment\n -fmerge-all-constants Allow merging of constants\n -fmessage-length=<value>\n Format message diagnostics so that they fit within N columns\n -fmodule-file=[<name>=]<file>\n Specify the mapping of module name to precompiled module file, or load a module file if name is omitted.\n -fmodule-map-file=<file>\n Load this module map file\n -fmodule-name=<name> Specify the name of the module to build\n -fmodules-cache-path=<directory>\n Specify the module cache path\n -fmodules-decluse Require declaration of modules used within a module\n -fmodules-disable-diagnostic-validation\n Disable validation of the diagnostic options when loading the module\n -fmodules-ignore-macro=<value>\n Ignore the definition of the given macro when building and loading modules\n -fmodules-prune-after=<seconds>\n Specify the interval (in seconds) after which a module file will be considered unused\n -fmodules-prune-interval=<seconds>\n Specify the interval (in seconds) between attempts to prune the module cache\n -fmodules-search-all Search even non-imported modules to resolve references\n -fmodules-strict-decluse\n Like -fmodules-decluse but requires all headers to be in modules\n -fmodules-ts Enable support for the C++ Modules TS\n -fmodules-user-build-path <directory>\n Specify the module user build path\n -fmodules-validate-input-files-content\n Validate PCM input files based on content if mtime differs\n -fmodules-validate-once-per-build-session\n Don't verify input files for the modules if the module has been successfully validated or loaded during this build session\n -fmodules-validate-system-headers\n Validate the system headers that a module depends on when loading the module\n -fmodules Enable the 'modules' language feature\n -fms-compatibility-version=<value>\n Dot-separated value representing the Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))\n -fms-compatibility Enable full Microsoft Visual C++ compatibility\n -fms-extensions Accept some non-standard constructs supported by the Microsoft compiler\n -fmsc-version=<value> Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))\n -fnew-alignment=<align> Specifies the largest alignment guaranteed by '::operator new(size_t)'\n -fno-access-control \n -fno-addrsig Don't emit an address-significance table\n -fno-allow-editor-placeholders\n \n -fno-apinotes-modules Disable module-based external API notes support\n -fno-apinotes Disable external API notes support\n -fno-asm-blocks \n -fno-assume-sane-operator-new\n Don't assume that C++'s global operator new can't alias any pointer\n -fno-autolink Disable generation of linker directives for automatic library linking\n -fno-blocks \n -fno-builtin-<value> Disable implicit builtin knowledge of a specific function\n -fno-builtin Disable implicit builtin knowledge of functions\n -fno-c++-static-destructors\n Disable C++ static destructor registration\n -fno-caret-diagnostics \n -fno-char8_t Disable C++ builtin type char8_t\n -fno-color-diagnostics Disable colors in diagnostics\n -fno-common Compile common globals like normal definitions\n -fno-complete-member-pointers\n Do not require member pointer base types to be complete if they would be significant under the Microsoft ABI\n -fno-constant-cfstrings Disable creation of CodeFoundation-type constant strings\n -fno-constant-nsarray-literals\n Disable creation of CodeFoundation-type constant initializer `NSArray`s from array literals\n -fno-constant-nsdictionary-literals\n Disable creation of CodeFoundation-type constant initializer `NSDictionary`s from dictionary literals\n -fno-constant-nsnumber-literals\n Disable creation of CodeFoundation-type constant initializer `NSNumber`s from number literals\n -fno-coroutines-ts \n -fno-coverage-mapping Disable code coverage analysis\n -fno-crash-diagnostics Disable auto-generation of preprocessed source files and a script for reproduction during a clang crash\n -fno-cuda-approx-transcendentals\n Don't use approximate transcendental functions\n -fno-cuda-short-ptr \n -fno-cxx-exceptions \n -fno-data-sections \n -fno-debug-info-for-profiling\n \n -fno-debug-macro Do not emit macro debug information\n -fno-debug-ranges-base-address\n \n -fno-declspec Disallow __declspec as a keyword\n -fno-delayed-template-parsing\n Disable delayed template parsing\n -fno-delete-null-pointer-checks\n Do not treat usage of null pointers as undefined behavior\n -fno-diagnostics-fixit-info\n Do not include fixit information in diagnostics\n -fno-digraphs Disallow alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:'\n -fno-discard-value-names\n Do not discard value names in LLVM IR\n -fno-dollars-in-identifiers\n Disallow '$' in identifiers\n -fno-double-square-bracket-attributes\n Disable '[[]]' attributes in all C and C++ language modes\n -fno-dwarf-directory-asm\n \n -fno-elide-constructors Disable C++ copy constructor elision\n -fno-elide-type Do not elide types when printing diagnostics\n -fno-exceptions Disable support for exception handling\n -fno-experimental-new-pass-manager\n Disables an experimental new pass manager in LLVM.\n -fno-experimental-relative-c++-abi-vtables\n Do not use the experimental C++ class ABI for classes with virtual tables\n -fno-fast-math \n -fno-fine-grained-bitfield-accesses\n Use large-integer access for consecutive bitfield runs.\n -fno-fixed-point Disable fixed point types\n -fno-force-dwarf-frame \n -fno-force-emit-vtables \n -fno-force-enable-int128\n Disable support for int128_t type\n -fno-function-sections \n -fno-global-isel Disables the global instruction selector\n -fno-gnu-inline-asm Disable GNU style inline asm\n -fno-gnu89-inline \n -fno-gpu-allow-device-init\n Don't allow device side init function in HIP\n -fno-gpu-rdc \n -fno-hip-new-launch-api Don't use new kernel launching API for HIP\n -fno-integrated-as Disable the integrated assembler\n -fno-integrated-cc1 Spawn a separate process for each cc1\n -fno-jump-tables Do not use jump tables for lowering switches\n -fno-keep-static-consts Don't keep static const variables if unused\n -fno-lto Disable LTO mode (default)\n -fno-math-errno \n -fno-merge-all-constants\n Disallow merging of constants\n -fno-no-access-control Disable C++ access control\n -fno-objc-infer-related-result-type\n do not infer Objective-C related result type based on method family\n -fno-operator-names Do not treat C++ operator name keywords as synonyms for operators\n -fno-pch-codegen Do not generate code for uses of this PCH that assumes an explicit object file will be built for the PCH\n -fno-pch-debuginfo Do not generate debug info for types in an object file built from this PCH and do not generate them elsewhere\n -fno-plt Use GOT indirection instead of PLT to make external function calls (x86 only)\n -fno-preserve-as-comments\n Do not preserve comments in inline assembly\n -fno-profile-generate Disable generation of profile instrumentation.\n -fno-profile-instr-generate\n Disable generation of profile instrumentation.\n -fno-profile-instr-use Disable using instrumentation data for profile-guided optimization\n -fno-ptrauth-abi-version\n Disable Pointer Authentication ABI versioning\n -fno-ptrauth-kernel-abi-version\n Disable Pointer Authentication kernel ABI versioning\n -fno-register-global-dtors-with-atexit\n Don't use atexit or __cxa_atexit to register global destructors\n -fno-reroll-loops \n -fno-rewrite-imports \n -fno-rewrite-includes \n -fno-ropi \n -fno-rtlib-add-rpath Do not add -rpath with architecture-specific resource directory to the linker flags\n -fno-rtti-data Disable generation of RTTI data\n -fno-rtti Disable generation of rtti information\n -fno-rwpi \n -fno-sanitize-address-poison-custom-array-cookie\n Disable poisoning array cookies when using custom operator new[] in AddressSanitizer\n -fno-sanitize-address-use-after-scope\n Disable use-after-scope detection in AddressSanitizer\n -fno-sanitize-address-use-odr-indicator\n Disable ODR indicator globals\n -fno-sanitize-blacklist Don't use blacklist file for sanitizers\n -fno-sanitize-cfi-canonical-jump-tables\n Do not make the jump table addresses canonical in the symbol table\n -fno-sanitize-cfi-cross-dso\n Disable control flow integrity (CFI) checks for cross-DSO calls.\n -fno-sanitize-coverage=<value>\n Disable specified features of coverage instrumentation for Sanitizers\n -fno-sanitize-memory-track-origins\n Disable origins tracking in MemorySanitizer\n -fno-sanitize-memory-use-after-dtor\n Disable use-after-destroy detection in MemorySanitizer\n -fno-sanitize-recover=<value>\n Disable recovery for specified sanitizers\n -fno-sanitize-stats Disable sanitizer statistics gathering.\n -fno-sanitize-thread-atomics\n Disable atomic operations instrumentation in ThreadSanitizer\n -fno-sanitize-thread-func-entry-exit\n Disable function entry/exit instrumentation in ThreadSanitizer\n -fno-sanitize-thread-memory-access\n Disable memory access instrumentation in ThreadSanitizer\n -fno-sanitize-trap=<value>\n Disable trapping for specified sanitizers\n -fno-sanitize-trap Disable trapping for all sanitizers\n -fno-short-wchar Force wchar_t to be an unsigned int\n -fno-show-column Do not include column number on diagnostics\n -fno-show-source-location\n Do not include source location information with diagnostics\n -fno-signed-char char is unsigned\n -fno-signed-zeros Allow optimizations that ignore the sign of floating point zeros\n -fno-spell-checking Disable spell-checking\n -fno-split-lto-unit \n -fno-stack-check Disable stack checking\n -fno-stack-clash-protection\n Disable stack clash protection\n -fno-stack-protector Disable the use of stack protectors\n -fno-stack-size-section \n -fno-standalone-debug Limit debug information produced to reduce size of debug binary\n -fno-strict-float-cast-overflow\n Relax language rules and try to match the behavior of the target's native float-to-int conversion instructions\n -fno-strict-return Don't treat control flow paths that fall off the end of a non-void function as unreachable\n -fno-sycl Disable SYCL kernels compilation for device\n -fno-temp-file Directly create compilation output files. This may lead to incorrect incremental builds if the compiler crashes\n -fno-threadsafe-statics Do not emit code to make initialization of local statics thread safe\n -fno-trigraphs Do not process trigraph sequences\n -fno-unique-basic-block-section-names\n \n -fno-unique-internal-linkage-names\n \n -fno-unique-section-names\n Don't use unique names for text and data sections\n -fno-unroll-loops Turn off loop unroller\n -fno-use-cxa-atexit Don't use __cxa_atexit for calling destructors\n -fno-use-init-array Use .ctors/.dtors instead of .init_array/.fini_array\n -fno-use-line-directives\n \n -fno-virtual-function-elimination\n \n -fno-visibility-inlines-hidden-static-local-var\n Disables -fvisibility-inlines-hidden-static-local-var (this is the default on non-darwin targets)\n -fno-whole-program-vtables\n \n -fno-xray-always-emit-customevents\n \n -fno-xray-always-emit-typedevents\n \n -fno-xray-function-index\n Omit function index section at the expense of single-function patching performance\n -fno-xray-ignore-loops \n -fno-xray-instrument \n -fno-zero-initialized-in-bss\n Don't place zero initialized data in BSS\n -fno-zvector \n -fobjc-arc-exceptions Use EH-safe code when synthesizing retains and releases in -fobjc-arc\n -fobjc-arc Synthesize retain and release calls for Objective-C pointers\n -fobjc-exceptions Enable Objective-C exceptions\n -fobjc-relative-method-lists\n Enable relative method lists\n -fobjc-runtime=<value> Specify the target Objective-C runtime kind and version\n -fobjc-weak Enable ARC-style weak references in Objective-C\n -fopenmp-simd Emit OpenMP code only for SIMD-based constructs.\n -fopenmp-targets=<value>\n Specify comma-separated list of triples OpenMP offloading targets to be supported\n -fopenmp Parse OpenMP pragmas and generate parallel code.\n -foptimization-record-file=<file>\n Specify the output name of the file containing the optimization remarks. Implies -fsave-optimization-record. On Darwin platforms, this cannot be used with multiple -arch <arch> options.\n -foptimization-record-passes=<regex>\n Only include passes which match a specified regular expression in the generated optimization record (by default, include all passes)\n -forder-file-instrumentation\n Generate instrumented code to collect order file into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)\n -fpack-struct=<value> Specify the default maximum struct packing alignment\n -fpascal-strings Recognize and construct Pascal-style string literals\n -fpass-plugin=<dsopath> Load pass plugin from a dynamic shared object file (only with new pass manager).\n -fpatchable-function-entry=<N,M>\n Generate M NOPs before function entry and N-M NOPs after function entry\n -fpcc-struct-return Override the default ABI to return all structs on the stack\n -fpch-codegen Generate code for uses of this PCH that assumes an explicit object file will be built for the PCH\n -fpch-debuginfo Generate debug info for types in an object file built from this PCH and do not generate them elsewhere\n -fpch-instantiate-templates\n Instantiate templates already while building a PCH\n -fpch-validate-input-files-content\n Validate PCH input files based on content if mtime differs\n -fplt \n -fplugin=<dsopath> Load the named plugin (dynamic shared object)\n -fprebuilt-module-path=<directory>\n Specify the prebuilt module path\n -fpreserve-as-comments \n -fprofile-exclude-files=<value>\n Instrument only functions from files where names don't match all the regexes separated by a semi-colon\n -fprofile-filter-files=<value>\n Instrument only functions from files where names match any regex separated by a semi-colon\n -fprofile-generate=<directory>\n Generate instrumented code to collect execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)\n -fprofile-generate Generate instrumented code to collect execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)\n -fprofile-instr-generate=<file>\n Generate instrumented code to collect execution counts into <file> (overridden by LLVM_PROFILE_FILE env var)\n -fprofile-instr-generate\n Generate instrumented code to collect execution counts into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)\n -fprofile-instr-use=<value>\n Use instrumentation data for profile-guided optimization\n -fprofile-remapping-file=<file>\n Use the remappings described in <file> to match the profile data against names in the program\n -fprofile-sample-accurate\n Specifies that the sample profile is accurate\n -fprofile-sample-use=<value>\n Enable sample-based profile guided optimizations\n -fprofile-use=<pathname>\n Use instrumentation data for profile-guided optimization. If pathname is a directory, it reads from <pathname>/default.profdata. Otherwise, it reads from file <pathname>.\n -fptrauth-abi-version=<value>\n Pointer Authentication ABI version\n -fptrauth-auth-traps Enable traps on authentication failures\n -fptrauth-block-descriptor-pointers\n enable signing block descriptors\n -fptrauth-calls Enable signing and authentication of all indirect calls\n -fptrauth-function-pointer-type-discrimination\n Enabling type discrimination on C function pointers\n -fptrauth-indirect-gotos\n Enable signing and authentication of indirect goto targets\n -fptrauth-intrinsics Enable pointer-authentication intrinsics\n -fptrauth-kernel-abi-version\n Enable Pointer Authentication kernel ABI version\n -fptrauth-objc-isa-masking\n pre- and post-authentication masking mode of objective-c isa pointers\n -fptrauth-objc-isa-mode=<value>\n Authentication mode for ObjC isa field. Full auth if unspecified\n -fptrauth-objc-isa Enable signing and authentication of Objective-C object's 'isa' field\n -fptrauth-returns Enable signing and authentication of return addresses\n -fptrauth-soft Enable software lowering of pointer authentication\n -fptrauth-vtable-pointer-address-discrimination\n Enable address discrimination of vtable pointers\n -fptrauth-vtable-pointer-type-discrimination\n Enable type discrimination of vtable pointers\n -freciprocal-math Allow division operations to be reassociated\n -freg-struct-return Override the default ABI to return small structs in registers\n -fregister-global-dtors-with-atexit\n Use atexit or __cxa_atexit to register global destructors\n -frelaxed-template-template-args\n Enable C++17 relaxed template template argument matching\n -freroll-loops Turn on loop reroller\n -frewrite-imports \n -frewrite-includes \n -fropi Generate read-only position independent code (ARM only)\n -frtlib-add-rpath Add -rpath with architecture-specific resource directory to the linker flags\n -frtti-data \n -frtti \n -frwpi Generate read-write position independent code (ARM only)\n -fsanitize-address-field-padding=<value>\n Level of field padding for AddressSanitizer\n -fsanitize-address-globals-dead-stripping\n Enable linker dead stripping of globals in AddressSanitizer\n -fsanitize-address-poison-custom-array-cookie\n Enable poisoning array cookies when using custom operator new[] in AddressSanitizer\n -fsanitize-address-use-after-scope\n Enable use-after-scope detection in AddressSanitizer\n -fsanitize-address-use-odr-indicator\n Enable ODR indicator globals to avoid false ODR violation reports in partially sanitized programs at the cost of an increase in binary size\n -fsanitize-blacklist=<value>\n Path to blacklist file for sanitizers\n -fsanitize-cfi-canonical-jump-tables\n Make the jump table addresses canonical in the symbol table\n -fsanitize-cfi-cross-dso\n Enable control flow integrity (CFI) checks for cross-DSO calls.\n -fsanitize-cfi-icall-generalize-pointers\n Generalize pointers in CFI indirect call type signature checks\n -fsanitize-coverage-allowlist=<value>\n Restrict sanitizer coverage instrumentation exclusively to modules and functions that match the provided special case list, except the blocked ones\n -fsanitize-coverage-blacklist=<value>\n Deprecated, use -fsanitize-coverage-blocklist= instead\n -fsanitize-coverage-blocklist=<value>\n Disable sanitizer coverage instrumentation for modules and functions that match the provided special case list, even the allowed ones\n -fsanitize-coverage-whitelist=<value>\n Deprecated, use -fsanitize-coverage-allowlist= instead\n -fsanitize-coverage=<value>\n Specify the type of coverage instrumentation for Sanitizers\n -fsanitize-hwaddress-abi=<value>\n Select the HWAddressSanitizer ABI to target (interceptor or platform, default interceptor). This option is currently unused.\n -fsanitize-memory-track-origins=<value>\n Enable origins tracking in MemorySanitizer\n -fsanitize-memory-track-origins\n Enable origins tracking in MemorySanitizer\n -fsanitize-memory-use-after-dtor\n Enable use-after-destroy detection in MemorySanitizer\n -fsanitize-recover=<value>\n Enable recovery for specified sanitizers\n -fsanitize-stats Enable sanitizer statistics gathering.\n -fsanitize-system-blacklist=<value>\n Path to system blacklist file for sanitizers\n -fsanitize-thread-atomics\n Enable atomic operations instrumentation in ThreadSanitizer (default)\n -fsanitize-thread-func-entry-exit\n Enable function entry/exit instrumentation in ThreadSanitizer (default)\n -fsanitize-thread-memory-access\n Enable memory access instrumentation in ThreadSanitizer (default)\n -fsanitize-trap=<value> Enable trapping for specified sanitizers\n -fsanitize-trap Enable trapping for all sanitizers\n -fsanitize-undefined-strip-path-components=<number>\n Strip (or keep only, if negative) a given number of path components when emitting check metadata.\n -fsanitize=<check> Turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks\n -fsave-optimization-record=<format>\n Generate an optimization record file in a specific format\n -fsave-optimization-record\n Generate a YAML optimization record file\n -fseh-exceptions Use SEH style exceptions\n -fshort-enums Allocate to an enum type only as many bytes as it needs for the declared range of possible values\n -fshort-wchar Force wchar_t to be a short unsigned int\n -fshow-column \n -fshow-overloads=<value>\n Which overload candidates to show when overload resolution fails: best|all; defaults to all\n -fsigned-char char is signed\n -fsized-deallocation Enable C++14 sized global deallocation functions\n -fsjlj-exceptions Use SjLj style exceptions\n -fslp-vectorize Enable the superword-level parallelism vectorization passes\n -fsmall-block-descriptors\n Enable small block descriptors\n -fsplit-dwarf-inlining Provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF\n -fsplit-lto-unit Enables splitting of the LTO unit\n -fstack-check Enable stack checking\n -fstack-clash-protection\n Enable stack clash protection\n -fstack-protector-all Enable stack protectors for all functions\n -fstack-protector-strong\n Enable stack protectors for some functions vulnerable to stack smashing. Compared to -fstack-protector, this uses a stronger heuristic that includes functions containing arrays of any size (and any type), as well as any calls to alloca or the taking of an address from a local variable\n -fstack-protector Enable stack protectors for some functions vulnerable to stack smashing. This uses a loose heuristic which considers functions vulnerable if they contain a char (or 8bit integer) array or constant sized calls to alloca, which are of greater size than ssp-buffer-size (default: 8 bytes). All variable sized calls to alloca are considered vulnerable\n -fstack-size-section Emit section containing metadata on function stack sizes\n -fstandalone-debug Emit full debug info for all types used by the program\n -fstrict-enums Enable optimizations based on the strict definition of an enum's value range\n -fstrict-float-cast-overflow\n Assume that overflowing float-to-int casts are undefined (default)\n -fstrict-return \n -fstrict-vtable-pointers\n Enable optimizations based on the strict rules for overwriting polymorphic C++ objects\n -fsycl Enable SYCL kernels compilation for device\n -fsystem-module Build this module as a system module. Only used with -emit-module\n -ftarget-variant-availability-checks\n Enable availability checks for the target variant platform\n -fthin-link-bitcode=<value>\n Write minimized bitcode to <file> for the ThinLTO thin link only\n -fthinlto-index=<value> Perform ThinLTO importing using provided function summary index\n -ftime-trace-granularity=<value>\n Minimum time granularity (in microseconds) traced by time profiler\n -ftime-trace Turn on time profiler. Generates JSON file based on output filename.\n -ftrap-function=<value> Issue call to specified function rather than a trap instruction\n -ftrapv-handler=<function name>\n Specify the function to be called on overflow\n -ftrapv Trap on integer overflow\n -ftrigraphs Process trigraph sequences\n -ftrivial-auto-var-init-stop-after=<value>\n Stop initializing trivial automatic stack variables after the specified number of instances\n -ftrivial-auto-var-init=<value>\n Initialize trivial automatic stack variables: uninitialized (default) | pattern\n -funique-basic-block-section-names\n Use unique names for basic block sections (ELF Only)\n -funique-internal-linkage-names\n Uniqueify Internal Linkage Symbol Names by appending the MD5 hash of the module path\n -funique-section-names \n -funroll-loops Turn on loop unroller\n -fuse-init-array \n -fuse-line-directives Use #line in preprocessed output\n -fvalidate-ast-input-files-content\n Compute and store the hash of input files used to build an AST. Files with mismatching mtime's are considered valid if both contents is identical\n -fveclib=<value> Use the given vector functions library\n -fvectorize Enable the loop vectorization passes\n -fverbose-asm Generate verbose assembly output\n -fvirtual-function-elimination\n Enables dead virtual function elimination optimization. Requires -flto=full\n -fvisibility-global-new-delete-hidden\n Give global C++ operator new and delete declarations hidden visibility\n -fvisibility-inlines-hidden-static-local-var\n When -fvisibility-inlines-hidden is enabled, static variables in inline C++ member functions will also be given hidden visibility by default\n -fvisibility-inlines-hidden\n Give inline C++ member functions hidden visibility by default\n -fvisibility-ms-compat Give global types 'default' visibility and global functions and variables 'hidden' visibility by default\n -fvisibility=<value> Set the default symbol visibility for all global declarations\n -fwasm-exceptions Use WebAssembly style exceptions\n -fwhole-program-vtables Enables whole-program vtable optimization. Requires -flto\n -fwrapv Treat signed integer overflow as two's complement\n -fwritable-strings Store string literals as writable data\n -fxray-always-emit-customevents\n Always emit __xray_customevent(...) calls even if the containing function is not always instrumented\n -fxray-always-emit-typedevents\n Always emit __xray_typedevent(...) calls even if the containing function is not always instrumented\n -fxray-always-instrument= <value>\n DEPRECATED: Filename defining the whitelist for imbuing the 'always instrument' XRay attribute.\n -fxray-attr-list= <value>\n Filename defining the list of functions/types for imbuing XRay attributes.\n -fxray-function-index \n -fxray-ignore-loops Don't instrument functions with loops unless they also meet the minimum function size\n -fxray-instruction-threshold= <value>\n Sets the minimum function size to instrument with XRay\n -fxray-instrumentation-bundle= <value>\n Select which XRay instrumentation points to emit. Options: all, none, function-entry, function-exit, function, custom. Default is 'all'. 'function' includes both 'function-entry' and 'function-exit'.\n -fxray-instrument Generate XRay instrumentation sleds on function entry and exit\n -fxray-link-deps Tells clang to add the link dependencies for XRay.\n -fxray-modes= <value> List of modes to link in by default into XRay instrumented binaries.\n -fxray-never-instrument= <value>\n DEPRECATED: Filename defining the whitelist for imbuing the 'never instrument' XRay attribute.\n -fzero-initialized-in-bss\n \n -fzvector Enable System z vector language extension\n -F <value> Add directory to framework include search path\n --gcc-toolchain=<value> Use the gcc toolchain at the given directory\n -gcodeview-ghash Emit type record hashes in a .debug$H section\n -gcodeview Generate CodeView debug information\n -gdwarf-2 Generate source-level debug information with dwarf version 2\n -gdwarf-3 Generate source-level debug information with dwarf version 3\n -gdwarf-4 Generate source-level debug information with dwarf version 4\n -gdwarf-5 Generate source-level debug information with dwarf version 5\n -gdwarf Generate source-level debug information with the default dwarf version\n -gembed-source Embed source text in DWARF debug sections\n -gline-directives-only Emit debug line info directives only\n -gline-tables-only Emit debug line number tables only\n -gmodules Generate debug info with external references to clang modules or precompiled headers\n -gno-embed-source Restore the default behavior of not embedding source text in DWARF debug sections\n -gno-inline-line-tables Don't emit inline line tables\n --gpu-max-threads-per-block=<value>\n Default max threads per block for kernel launch bounds for HIP\n -gsplit-dwarf=<value> Set DWARF fission mode to either 'split' or 'single'\n -gz=<value> DWARF debug sections compression type\n -gz DWARF debug sections compression type\n -G <size> Put objects of at most <size> bytes into small data section (MIPS / Hexagon)\n -g Generate source-level debug information\n --help-hidden Display help for hidden options\n -help Display available options\n --hip-device-lib=<value>\n HIP device library\n --hip-link Link clang-offload-bundler bundles for HIP\n --hip-version=<value> HIP version in the format of major.minor.patch\n -H Show header includes and nesting depth\n -I- Restrict all prior -I flags to double-quoted inclusion and remove current directory from include path\n -iapinotes-modules <directory>\n Add directory to the API notes search path referenced by module name\n -ibuiltininc Enable builtin #include directories even when -nostdinc is used before or after -ibuiltininc. Using -nobuiltininc after the option disables it\n -idirafter <value> Add directory to AFTER include search path\n -iframeworkwithsysroot <directory>\n Add directory to SYSTEM framework search path, absolute paths are relative to -isysroot\n -iframework <value> Add directory to SYSTEM framework search path\n -imacros <file> Include macros from file before parsing\n -include-pch <file> Include precompiled header file\n -include <file> Include file before parsing\n -index-header-map Make the next included directory (-I or -F) an indexer header map\n -index-ignore-system-symbols\n Ignore symbols from system headers\n -index-record-codegen-name\n Record the codegen name for symbols\n -index-store-path <value>\n Enable indexing with the specified data store path\n -iprefix <dir> Set the -iwithprefix/-iwithprefixbefore prefix\n -iquote <directory> Add directory to QUOTE include search path\n -isysroot <dir> Set the system root directory (usually /)\n -isystem-after <directory>\n Add directory to end of the SYSTEM include search path\n -isystem <directory> Add directory to SYSTEM include search path\n -ivfsoverlay <value> Overlay the virtual filesystem described by file over the real file system\n -iwithprefixbefore <dir>\n Set directory to include search path with prefix\n -iwithprefix <dir> Set directory to SYSTEM include search path with prefix\n -iwithsysroot <directory>\n Add directory to SYSTEM include search path, absolute paths are relative to -isysroot\n -I <dir> Add directory to include search path\n --libomptarget-nvptx-path=<value>\n Path to libomptarget-nvptx libraries\n -L <dir> Add directory to library search path\n -mabicalls Enable SVR4-style position-independent code (Mips only)\n -maix-struct-return Return all structs in memory (PPC32 only)\n -malign-branch-boundary=<value>\n Specify the boundary's size to align branches\n -malign-branch=<value> Specify types of branches to align\n -malign-double Align doubles to two words in structs (x86 only)\n -mbackchain Link stack frames through backchain on System Z\n -mbranch-protection=<value>\n Enforce targets of indirect branches and function returns\n -mbranches-within-32B-boundaries\n Align selected branches (fused, jcc, jmp) within 32-byte boundary\n -mcmodel=medany Equivalent to -mcmodel=medium, compatible with RISC-V gcc.\n -mcmodel=medlow Equivalent to -mcmodel=small, compatible with RISC-V gcc.\n -mcmse Allow use of CMSE (Armv8-M Security Extensions)\n -mcode-object-v3 Enable code object v3 (AMDGPU only)\n -mcrc Allow use of CRC instructions (ARM/Mips only)\n -mcumode CU wavefront execution mode is used (AMDGPU only)\n -mdouble=<value> Force double to be 32 bits or 64 bits\n -MD Write a depfile containing user and system headers\n -meabi <value> Set EABI type, e.g. 4, 5 or gnu (default depends on triple)\n -membedded-data Place constants in the .rodata section instead of the .sdata section even if they meet the -G <size> threshold (MIPS)\n -menable-experimental-extensions\n Enable use of experimental RISC-V extensions.\n -mexec-model=<value> Execution model (WebAssembly only)\n -mexecute-only Disallow generation of data access to code sections (ARM only)\n -mextern-sdata Assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)\n -mfentry Insert calls to fentry at function entry (x86/SystemZ only)\n -mfix-cortex-a53-835769 Workaround Cortex-A53 erratum 835769 (AArch64 only)\n -mfp32 Use 32-bit floating point registers (MIPS only)\n -mfp64 Use 64-bit floating point registers (MIPS only)\n -MF <file> Write depfile output from -MMD, -MD, -MM, or -M to <file>\n -mgeneral-regs-only Generate code which only uses the general purpose registers (AArch64 only)\n -mglobal-merge Enable merging of globals\n -mgpopt Use GP relative accesses for symbols known to be in a small data section (MIPS)\n -MG Add missing headers to depfile\n -mharden-sls=<value> Select straight-line speculation hardening scope\n -mhvx-length=<value> Set Hexagon Vector Length\n -mhvx=<value> Enable Hexagon Vector eXtensions\n -mhvx Enable Hexagon Vector eXtensions\n -miamcu Use Intel MCU ABI\n --migrate Run the migrator\n -mincremental-linker-compatible\n (integrated-as) Emit an object file which can be used with an incremental linker\n -mindirect-jump=<value> Change indirect jump instructions to inhibit speculation\n -mios-version-min=<value>\n Set iOS deployment target\n -MJ <value> Write a compilation database entry per input\n -mllvm <value> Additional arguments to forward to LLVM's option processing\n -mlocal-sdata Extend the -G behaviour to object local data (MIPS)\n -mlong-calls Generate branches with extended addressability, usually via indirect jumps.\n -mlong-double-128 Force long double to be 128 bits\n -mlong-double-64 Force long double to be 64 bits\n -mlong-double-80 Force long double to be 80 bits, padded to 128 bits for storage\n -mlvi-cfi Enable only control-flow mitigations for Load Value Injection (LVI)\n -mlvi-hardening Enable all mitigations for Load Value Injection (LVI)\n -mmacosx-version-min=<value>\n Set Mac OS X deployment target\n -mmadd4 Enable the generation of 4-operand madd.s, madd.d and related instructions.\n -MMD Write a depfile containing user headers\n -mmemops Enable generation of memop instructions\n -mms-bitfields Set the default structure layout to be compatible with the Microsoft compiler standard\n -mmsa Enable MSA ASE (MIPS only)\n -mmt Enable MT ASE (MIPS only)\n -MM Like -MMD, but also implies -E and writes to stdout by default\n -mno-abicalls Disable SVR4-style position-independent code (Mips only)\n -mno-code-object-v3 Disable code object v3 (AMDGPU only)\n -mno-crc Disallow use of CRC instructions (Mips only)\n -mno-cumode WGP wavefront execution mode is used (AMDGPU only)\n -mno-embedded-data Do not place constants in the .rodata section instead of the .sdata if they meet the -G <size> threshold (MIPS)\n -mno-execute-only Allow generation of data access to code sections (ARM only)\n -mno-extern-sdata Do not assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)\n -mno-fix-cortex-a53-835769\n Don't workaround Cortex-A53 erratum 835769 (AArch64 only)\n -mno-global-merge Disable merging of globals\n -mno-gpopt Do not use GP relative accesses for symbols known to be in a small data section (MIPS)\n -mno-hvx Disable Hexagon Vector eXtensions\n -mno-implicit-float Don't generate implicit floating point instructions\n -mno-incremental-linker-compatible\n (integrated-as) Emit an object file which cannot be used with an incremental linker\n -mno-local-sdata Do not extend the -G behaviour to object local data (MIPS)\n -mno-long-calls Restore the default behaviour of not generating long calls\n -mno-lvi-cfi Disable control-flow mitigations for Load Value Injection (LVI)\n -mno-lvi-hardening Disable mitigations for Load Value Injection (LVI)\n -mno-madd4 Disable the generation of 4-operand madd.s, madd.d and related instructions.\n -mno-memops Disable generation of memop instructions\n -mno-movt Disallow use of movt/movw pairs (ARM only)\n -mno-ms-bitfields Do not set the default structure layout to be compatible with the Microsoft compiler standard\n -mno-msa Disable MSA ASE (MIPS only)\n -mno-mt Disable MT ASE (MIPS only)\n -mno-neg-immediates Disallow converting instructions with negative immediates to their negation or inversion.\n -mno-nvj Disable generation of new-value jumps\n -mno-nvs Disable generation of new-value stores\n -mno-outline Disable function outlining (AArch64 only)\n -mno-packets Disable generation of instruction packets\n -mno-relax Disable linker relaxation\n -mno-restrict-it Allow generation of deprecated IT blocks for ARMv8. It is off by default for ARMv8 Thumb mode\n -mno-save-restore Disable using library calls for save and restore\n -mno-seses Disable speculative execution side effect suppression (SESES)\n -mno-sram-ecc Disable SRAM ECC (AMDGPU only)\n -mno-stack-arg-probe Disable stack probes which are enabled by default\n -mno-tls-direct-seg-refs\n Disable direct TLS access through segment registers\n -mno-unaligned-access Force all memory accesses to be aligned (AArch32/AArch64 only)\n -mno-wavefrontsize64 Wavefront size 32 is used\n -mno-xnack Disable XNACK (AMDGPU only)\n -mnocrc Disallow use of CRC instructions (ARM only)\n -mnop-mcount Generate mcount/__fentry__ calls as nops. To activate they need to be patched in.\n -mnvj Enable generation of new-value jumps\n -mnvs Enable generation of new-value stores\n -module-dependency-dir <value>\n Directory to dump module dependencies to\n -module-file-info Provide information about a particular module file\n -momit-leaf-frame-pointer\n Omit frame pointer setup for leaf functions\n -moutline Enable function outlining (AArch64 only)\n -mpacked-stack Use packed stack layout (SystemZ only).\n -mpackets Enable generation of instruction packets\n -mpad-max-prefix-size=<value>\n Specify maximum number of prefixes to use for padding\n -mpie-copy-relocations Use copy relocations support for PIE builds\n -mprefer-vector-width=<value>\n Specifies preferred vector width for auto-vectorization. Defaults to 'none' which allows target specific decisions.\n -MP Create phony target for each dependency (other than main file)\n -mqdsp6-compat Enable hexagon-qdsp6 backward compatibility\n -MQ <value> Specify name of main file output to quote in depfile\n -mrecord-mcount Generate a __mcount_loc section entry for each __fentry__ call.\n -mrelax-all (integrated-as) Relax all machine instructions\n -mrelax Enable linker relaxation\n -mrestrict-it Disallow generation of deprecated IT blocks for ARMv8. It is on by default for ARMv8 Thumb mode.\n -mrtd Make StdCall calling convention the default\n -msave-restore Enable using library calls for save and restore\n -mseses Enable speculative execution side effect suppression (SESES). Includes LVI control flow integrity mitigations\n -msign-return-address=<value>\n Select return address signing scope\n -msmall-data-limit=<value>\n Put global and static data smaller than the limit into a special section\n -msoft-float Use software floating point\n -msram-ecc Enable SRAM ECC (AMDGPU only)\n -mstack-alignment=<value>\n Set the stack alignment\n -mstack-arg-probe Enable stack probes\n -mstack-probe-size=<value>\n Set the stack probe size\n -mstackrealign Force realign the stack at entry to every function\n -msvr4-struct-return Return small structs in registers (PPC32 only)\n -mthread-model <value> The thread model to use, e.g. posix, single (posix by default)\n -mtls-direct-seg-refs Enable direct TLS access through segment registers (default)\n -mtls-size=<value> Specify bit size of immediate TLS offsets (AArch64 ELF only): 12 (for 4KB) | 24 (for 16MB, default) | 32 (for 4GB) | 48 (for 256TB, needs -mcmodel=large)\n -mtp=<value> Thread pointer access method (AArch32/AArch64 only)\n -mtune=<value> Accepted for compatibility with GCC. Currently has no effect.\n -MT <value> Specify name of main file output in depfile\n -munaligned-access Allow memory accesses to be unaligned (AArch32/AArch64 only)\n -MV Use NMake/Jom format for the depfile\n -mwavefrontsize64 Wavefront size 64 is used\n -mxnack Enable XNACK (AMDGPU only)\n -M Like -MD, but also implies -E and writes to stdout by default\n --no-cuda-include-ptx=<value>\n Do not include PTX for the following GPU architecture (e.g. sm_35) or 'all'. May be specified more than once.\n --no-cuda-version-check Don't error out if the detected version of the CUDA install is too low for the requested CUDA gpu architecture.\n --no-offload-arch=<value>\n Remove CUDA/HIP offloading device architecture (e.g. sm_35, gfx906) from the list of devices to compile for. 'all' resets the list to its default value.\n --no-system-header-prefix=fix>\n Treat all #include paths starting withfix> as not including a system header.\n -nobuiltininc Disable builtin #include directories\n -nogpulib Do not link device library for CUDA/HIP device compilation\n -nostdinc++ Disable standard #include directories for the C++ standard library\n -ObjC++ Treat source input files as Objective-C++ inputs\n -objcmt-atomic-property Make migration to 'atomic' properties\n -objcmt-migrate-all Enable migration to modern ObjC\n -objcmt-migrate-annotation\n Enable migration to property and method annotations\n -objcmt-migrate-designated-init\n Enable migration to infer NS_DESIGNATED_INITIALIZER for initializer methods\n -objcmt-migrate-instancetype\n Enable migration to infer instancetype for method result type\n -objcmt-migrate-literals\n Enable migration to modern ObjC literals\n -objcmt-migrate-ns-macros\n Enable migration to NS_ENUM/NS_OPTIONS macros\n -objcmt-migrate-property-dot-syntax\n Enable migration of setter/getter messages to property-dot syntax\n -objcmt-migrate-property\n Enable migration to modern ObjC property\n -objcmt-migrate-protocol-conformance\n Enable migration to add protocol conformance on classes\n -objcmt-migrate-readonly-property\n Enable migration to modern ObjC readonly property\n -objcmt-migrate-readwrite-property\n Enable migration to modern ObjC readwrite property\n -objcmt-migrate-subscripting\n Enable migration to modern ObjC subscripting\n -objcmt-ns-nonatomic-iosonly\n Enable migration to use NS_NONATOMIC_IOSONLY macro for setting property's 'atomic' attribute\n -objcmt-returns-innerpointer-property\n Enable migration to annotate property with NS_RETURNS_INNER_POINTER\n -objcmt-whitelist-dir-path=<value>\n Only modify files with a filename contained in the provided directory path\n -ObjC Treat source input files as Objective-C inputs\n --offload-arch=<value> CUDA/HIP offloading device architecture (e.g. sm_35, gfx906). May be specified more than once.\n -o <file> Write output to <file>\n -pg Enable mcount instrumentation\n -pipe Use pipes between commands, when possible\n --precompile Only precompile the input\n -print-effective-triple Print the effective target triple\n -print-file-name=<file> Print the full library path of <file>\n -print-ivar-layout Enable Objective-C Ivar layout bitmap print trace\n -print-libgcc-file-name Print the library path for the currently used compiler runtime library (\"libgcc.a\" or \"libclang_rt.builtins.*.a\")\n -print-prog-name=<name> Print the full program path of <name>\n -print-resource-dir Print the resource directory pathname\n -print-search-dirs Print the paths used for finding libraries and programs\n -print-supported-cpus Print supported cpu models for the given target (if target is not specified, it will print the supported cpus for the default target)\n -print-target-triple Print the normalized target triple\n -print-targets Print the registered targets\n -pthread Support POSIX threads in generated code\n --ptxas-path=<value> Path to ptxas (used for compiling CUDA code)\n -P Disable linemarker output in -E mode\n -Qn Do not emit metadata containing compiler name and version\n -Qunused-arguments Don't emit warning for unused driver arguments\n -Qy Emit metadata containing compiler name and version\n -relocatable-pch Whether to build a relocatable precompiled header\n -rewrite-legacy-objc Rewrite Legacy Objective-C source to C++\n -rewrite-objc Rewrite Objective-C source to C++\n --rocm-device-lib-path=<value>\n ROCm device library path. Alternative to rocm-path.\n --rocm-path=<value> ROCm installation path, used for finding and automatically linking required bitcode libraries.\n -Rpass-analysis=<value> Report transformation analysis from optimization passes whose name matches the given POSIX regular expression\n -Rpass-missed=<value> Report missed transformations by optimization passes whose name matches the given POSIX regular expression\n -Rpass=<value> Report transformations performed by optimization passes whose name matches the given POSIX regular expression\n -rtlib=<value> Compiler runtime library to use\n -R<remark> Enable the specified remark\n -save-stats=<value> Save llvm statistics.\n -save-stats Save llvm statistics.\n -save-temps=<value> Save intermediate compilation results.\n -save-temps Save intermediate compilation results\n -serialize-diagnostics <value>\n Serialize compiler diagnostics to a file\n -shared-libsan Dynamically link the sanitizer runtime\n -static-libsan Statically link the sanitizer runtime\n -static-openmp Use the static host OpenMP runtime while linking.\n -std=<value> Language standard to compile for\n -stdlib++-isystem <directory>\n Use directory as the C++ standard library include path\n -stdlib=<value> C++ standard library to use\n -sycl-std=<value> SYCL language standard to compile for.\n --system-header-prefix=fix>\n Treat all #include paths starting withfix> as including a system header.\n -S Only run preprocess and compilation steps\n -target-variant <value> Generate code that may run on a particular variant of the deployment target\n --target=<value> Generate code for the given target\n -Tbss <addr> Set starting address of BSS to <addr>\n -Tdata <addr> Set starting address of DATA to <addr>\n -time Time individual commands\n -traditional-cpp Enable some traditional CPP emulation\n -trigraphs Process trigraph sequences\n -Ttext <addr> Set starting address of TEXT to <addr>\n -T <script> Specify <script> as linker script\n -undef undef all system defines\n -unwindlib=<value> Unwind library to use\n -U <macro> Undefine macro <macro>\n --verify-debug-info Verify the binary representation of debug output\n -verify-pch Load and verify that a pre-compiled header file is not stale\n --version Print version information\n -v Show commands to run and use verbose output\n -Wa,<arg> Pass the comma separated arguments in <arg> to the assembler\n -Wdeprecated Enable warnings for deprecated constructs and define __DEPRECATED\n -Wl,<arg> Pass the comma separated arguments in <arg> to the linker\n -working-directory <value>\n Resolve file paths relative to the specified directory\n -Wp,<arg> Pass the comma separated arguments in <arg> to the preprocessor\n -W<warning> Enable the specified warning\n -w Suppress all warnings\n -Xanalyzer <arg> Pass <arg> to the static analyzer\n -Xarch_device <arg> Pass <arg> to the CUDA/HIP device compilation\n -Xarch_host <arg> Pass <arg> to the CUDA/HIP host compilation\n -Xassembler <arg> Pass <arg> to the assembler\n -Xclang <arg> Pass <arg> to the clang compiler\n -Xcuda-fatbinary <arg> Pass <arg> to fatbinary invocation\n -Xcuda-ptxas <arg> Pass <arg> to the ptxas assembler\n -Xlinker <arg> Pass <arg> to the linker\n -Xopenmp-target=<triple> <arg>\n Pass <arg> to the target offloading toolchain identified by <triple>.\n -Xopenmp-target <arg> Pass <arg> to the target offloading toolchain.\n -Xpreprocessor <arg> Pass <arg> to the preprocessor\n -x <language> Treat subsequent input files as having type <language>\n -z <arg> Pass -z <arg> to the linker\n```","dir":"/Programming/C/","name":"Clang.md","path":"Programming/C/Clang.md","url":"/Programming/C/Clang.html"},{"sort":1,"permalink":"/ComputerScience/OperatingSystem/","layout":"default","title":"OperatingSystem","content":"<h1 id=\"operatingsystem\">OperatingSystem</h1>\n","dir":"/ComputerScience/OperatingSystem/","name":"README.md","path":"ComputerScience/OperatingSystem/README.md","url":"/ComputerScience/OperatingSystem/"},{"sort":1,"permalink":"/DevOps/Cloud/","layout":"default","title":"Cloud","content":"<h1 id=\"cloud\">Cloud</h1>\n","dir":"/DevOps/Cloud/","name":"README.md","path":"DevOps/Cloud/README.md","url":"/DevOps/Cloud/"},{"sort":1,"permalink":"/Project/DockerForWeb/","layout":"default","title":"DockerForWeb","content":"<h1 id=\"dockerforweb\">DockerForWeb</h1>\n<blockquote>\n <p><code class=\"language-plaintext highlighter-rouge\">Docker Engine SDKS</code>를 이용, 웹을 이용해 <code class=\"language-plaintext highlighter-rouge\">Docker</code>관리</p>\n</blockquote>\n","dir":"/Project/DockerForWeb/","name":"README.md","path":"Project/DockerForWeb/README.md","url":"/Project/DockerForWeb/"},{"sort":1,"permalink":"/Programming/C/","layout":"default","title":"C","content":"<h1 id=\"c\">C</h1>\n","dir":"/Programming/C/","name":"README.md","path":"Programming/C/README.md","url":"/Programming/C/"},{"sort":1,"permalink":"/DevOps/IaC/Terraform/","layout":"default","title":"Terraform","content":"<h1 id=\"terraform\">Terraform</h1>\n","dir":"/DevOps/IaC/Terraform/","name":"README.md","path":"DevOps/IaC/Terraform/README.md","url":"/DevOps/IaC/Terraform/"},{"sort":1,"permalink":"/Linux/Kernel/trace/","layout":"default","title":"trace","content":"<h1 id=\"trace\">trace</h1>\n<h2 id=\"리눅스에서의-로그-레벨linuxkernelh\">리눅스에서의 로그 레벨(linux/kernel.h)</h2>\n\n<table>\n <thead>\n <tr>\n <th>level</th>\n <th>define</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>0</td>\n <td>#define KERN_EMERG “&lt;0&gt;” / * system is unusable */</td>\n </tr>\n <tr>\n <td>1</td>\n <td>#define KERN_ALERT “&lt;1&gt;” / * action must be taken immediately */</td>\n </tr>\n <tr>\n <td>2</td>\n <td>#define KERN_CRIT “&lt;2&gt;” / * critical conditions */</td>\n </tr>\n <tr>\n <td>3</td>\n <td>#define KERN_ERR “&lt;3&gt;” / * error conditions */</td>\n </tr>\n <tr>\n <td>4</td>\n <td>#define KERN_WARNING “&lt;4&gt;” / * WARNING conditions */</td>\n </tr>\n <tr>\n <td>5</td>\n <td>#define KERN_NOTICE “&lt;5&gt;” / * normal but significant condition */</td>\n </tr>\n <tr>\n <td>6</td>\n <td>#define KERN_INFO “&lt;6&gt;” / * informational */</td>\n </tr>\n <tr>\n <td>7</td>\n <td>#define KERN_DEBUG “&lt;7&gt;” / * debug-level messages */</td>\n </tr>\n </tbody>\n</table>\n\n<h2 id=\"printk\">printk</h2>\n<h2 id=\"dump_stack\">dump_stack</h2>\n","dir":"/Linux/Kernel/trace/","name":"README.md","path":"Linux/Kernel/trace/README.md","url":"/Linux/Kernel/trace/"},{"sort":1,"permalink":"/Linux/Kernel/","layout":"default","title":"Kernel","content":"<h1 id=\"kernel\">Kernel</h1>\n<h2 id=\"trace\">trace</h2>\n","dir":"/Linux/Kernel/","name":"README.md","path":"Linux/Kernel/README.md","url":"/Linux/Kernel/"},{"sort":1,"layout":"default","title":"Make","content":"<h1 id=\"make\">Make</h1>\n<h2 id=\"규칙\">규칙</h2>\n<blockquote>\n <p>간단한 메이크파일은 아래의 블록과 같은 규칙으로 구성된다.</p>\n <div class=\"language-make highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nl\">target...</span><span class=\"o\">:</span>\t<span class=\"nf\">prerequisites...</span>\n\t\t\trecipe\n\t\t\t...\n</code></pre>  </div> </div>\n <h3 id=\"target\"><strong><code class=\"language-plaintext highlighter-rouge\">target</code></strong></h3>\n <p>보통 프로그램에 의해 생성된 실행 파일 혹은 목적 파일의 이름입니다. <br />\n또한 수행해야 할 행동의 이름일 수 있습니다. (<a href=\"#phony-targets\">phony_target</a>)</p>\n <h3 id=\"prerequisites\"><strong><code class=\"language-plaintext highlighter-rouge\">prerequisites</code></strong></h3>\n <p><code class=\"language-plaintext highlighter-rouge\">target</code>을 생성하기 위해 사용되는 파일입니다.</p>\n <h3 id=\"recipe\"><strong><code class=\"language-plaintext highlighter-rouge\">recipe</code></strong></h3>\n <p><code class=\"language-plaintext highlighter-rouge\">make</code>가 수행해야 할 행동입니다. <br />\n<code class=\"language-plaintext highlighter-rouge\">recipe</code>는 둘 이상의 명령을 가질 수 있으며, 같은 줄에 두거나 각자의 줄에 가질 수 있습니다.</p>\n <blockquote>\n <h4 id=\"주의사항\"><strong><code class=\"language-plaintext highlighter-rouge\">주의사항</code></strong></h4>\n <p><code class=\"language-plaintext highlighter-rouge\">recipe</code> 시작 부분에 탭 문자를 입력할 필요가 있습니다. <br />\n탭 이외의 다른 문자를 선호한다면 <code class=\"language-plaintext highlighter-rouge\">.RECIPEPREFIX</code>변수를 다른 문자로 설정하면 됩니다.</p>\n </blockquote>\n</blockquote>\n\n<h2 id=\"phony-targets\"><strong>Phony Targets</strong></h2>\n","dir":"/Linux/Utility/Make/","name":"Make.md","path":"Linux/Utility/Make/Make.md","url":"/Linux/Utility/Make/Make.html"},{"sort":1,"permalink":"/Linux/Utility/Make/","layout":"default","title":"Make","content":"<h1 id=\"make\">Make</h1>\n","dir":"/Linux/Utility/Make/","name":"README.md","path":"Linux/Utility/Make/README.md","url":"/Linux/Utility/Make/"},{"sort":1,"layout":"default","title":"printk() 함수","content":"# printk() 함수\nprintk() 함수를 호출하면 커널 로그를 볼 수 있습니다.\n## printk 자료형에 따른 서식 지정\n\n|변수 타입|서식 지정자|\n|-------|---------|\n|int|%d, %x|\n|unsigned int|%u, %x|\n|long|%ld, %lx|\n|unsigned long|%lu, %lx|\n|long long|%lld, %llx|\n|unsigned long long|%llu, %llx|\n|size_t|%zu, %zx|\n|ssize+t|%zd, %zx|\n|s32|%d, %x|\n|u32|%u, %x|\n|s64|%lld, %llx|\n|u64|%llu, %llx|\n\n## printk()를 이용한 로그레벨 적용 방법\n[log level](/Linux/Kernel/trace/#%EB%A6%AC%EB%88%85%EC%8A%A4%EC%97%90%EC%84%9C%EC%9D%98-%EB%A1%9C%EA%B7%B8-%EB%A0%88%EB%B2%A8linuxkernelh)\n```c\nprintk(KERN_INFO \"info message...\\n\");\nprintk(\"<4>\" \"warning message...\\n\");\nprintk(\"<3>\" error message...\\n);\nprintk(\"default loglevel...\\n\");\n```\n## printk로 함수 심벌 정보를 보는 방법\nhttps://github.com/raspberrypi/linux/blob/rpi-4.19.y/kernel/workqueue.c\n```c\nstatic void insert_wq_barrier(struct pool_workqueue *pwq,\n struct wq_barrier *barr,\n struct work_struct *target, struct worker *worker)\n{\n struct list_head *head;\n unsigned int linked = 0;\n\n printk(\"[+] process: %s \\n\", current->comm);\n printk(\"[+][debug] message [F: %s, L: %d]: caller:(%pS)\\n\",\n __func__, __LINE__, (void*)__builtin_return_address(0));\n...\n```\n* \\_\\_func\\_\\_: 현재 실행 중인 함수의 이름\n* \\_\\_LINE\\_\\_:현재 실행 중인 코드 라인\n* \\_\\_builtin_return_address(0): 현재 실행중인 함수를 호출한 함수의 주소\n\n`%pS`는 아규먼트로 지정한 주소를 심벌로 변환해 출력합니다.\n\n## printk를 쓸 때 주의해야 할 점\nprintk를 사용할 때는 printk의 호출 빈도를 반드시 체크해야 합니다. \\\n리눅스 커널에서 1초에 수백번 이상 호출되는 함수에 printk를 사용하면 시스템이 락업(Lockup)되거나 커널 패닉으로 오동작할 수 있습니다.","dir":"/Linux/Kernel/trace/","name":"printk.md","path":"Linux/Kernel/trace/printk.md","url":"/Linux/Kernel/trace/printk.html"},{"sort":1,"permalink":"/Linux/","layout":"default","title":"Linux","content":"<h1 id=\"linux\">Linux</h1>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{% include list.liquid all=true %}\n</code></pre>  </div></div>\n","dir":"/Linux/","name":"README.md","path":"Linux/README.md","url":"/Linux/"},{"sort":2,"permalink":"/Programming/","layout":"default","title":"Programming","content":"<h1 id=\"programming\">Programming</h1>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{% include list.liquid all=true %}\n\n\n- [C](/Programming/C/)\n    - [Clang](/Programming/C/Clang.html)\n- [C++](/Programming/C++/)\n- [Go](/Programming/Go/)\n- [Rust](/Programming/Rust/)\n</code></pre>  </div></div>\n","dir":"/Programming/","name":"README.md","path":"Programming/README.md","url":"/Programming/"},{"sort":2,"permalink":"/DevOps/Container/","layout":"default","title":"Container","content":"<h1 id=\"container\">Container</h1>\n","dir":"/DevOps/Container/","name":"README.md","path":"DevOps/Container/README.md","url":"/DevOps/Container/"},{"sort":2,"permalink":"/DevOps/IaC/Ansible/","layout":"default","title":"Ansible","content":"<h1 id=\"ansible\">Ansible</h1>\n","dir":"/DevOps/IaC/Ansible/","name":"README.md","path":"DevOps/IaC/Ansible/README.md","url":"/DevOps/IaC/Ansible/"},{"sort":2,"permalink":"/ComputerScience/ComputerSystem/","layout":"default","title":"ComputerSystem","content":"<h1 id=\"computersystem\">ComputerSystem</h1>\n","dir":"/ComputerScience/ComputerSystem/","name":"README.md","path":"ComputerScience/ComputerSystem/README.md","url":"/ComputerScience/ComputerSystem/"},{"sort":2,"layout":"default","title":"dump_stack() 함수","content":"# dump_stack() 함수\n","dir":"/Linux/Kernel/trace/","name":"dump_stack.md","path":"Linux/Kernel/trace/dump_stack.md","url":"/Linux/Kernel/trace/dump_stack.html"},{"sort":2,"permalink":"/Programming/C++/","layout":"default","title":"C++","content":"<h1 id=\"c\">C++</h1>\n","dir":"/Programming/C++/","name":"README.md","path":"Programming/C++/README.md","url":"/Programming/C++/"},{"sort":2,"permalink":"/Linux/Utility/","layout":"default","title":"Utility","content":"<h1 id=\"utility\">Utility</h1>\n\n<h2 id=\"make\">Make</h2>\n","dir":"/Linux/Utility/","name":"README.md","path":"Linux/Utility/README.md","url":"/Linux/Utility/"},{"sort":2,"permalink":"/Project/DevlopmentEnviroment/","layout":"default","title":"DevelopmentEnvironment","content":"<h1 id=\"developmentenvironment\">DevelopmentEnvironment</h1>\n","dir":"/Project/DevlopmentEnviroment/","name":"README.md","path":"Project/DevlopmentEnviroment/README.md","url":"/Project/DevlopmentEnviroment/"},{"sort":3,"permalink":"/Programming/Go/","layout":"default","title":"Go","content":"<h1 id=\"go\">Go</h1>\n","dir":"/Programming/Go/","name":"README.md","path":"Programming/Go/README.md","url":"/Programming/Go/"},{"sort":3,"permalink":"/DevOps/IaC/","layout":"default","title":"IaC","content":"<h1 id=\"iac\">IaC</h1>\n","dir":"/DevOps/IaC/","name":"README.md","path":"DevOps/IaC/README.md","url":"/DevOps/IaC/"},{"sort":3,"permalink":"/ComputerScience/","layout":"default","title":"ComputerScience","content":"<h1 id=\"computerscience\">ComputerScience</h1>\n","dir":"/ComputerScience/","name":"README.md","path":"ComputerScience/README.md","url":"/ComputerScience/"},{"sort":3,"permalink":"/ComputerScience/DataStructure/","layout":"default","title":"DataStructure","content":"<h1 id=\"datastructure\">DataStructure</h1>\n","dir":"/ComputerScience/DataStructure/","name":"README.md","path":"ComputerScience/DataStructure/README.md","url":"/ComputerScience/DataStructure/"},{"sort":4,"permalink":"/DevOps/","layout":"default","title":"DevOps","content":"<h1 id=\"devops\">DevOps</h1>\n","dir":"/DevOps/","name":"README.md","path":"DevOps/README.md","url":"/DevOps/"},{"sort":4,"permalink":"/ComputerScience/Algorithm/","layout":"default","title":"Algorithm","content":"<h1 id=\"algorithm\">Algorithm</h1>\n","dir":"/ComputerScience/Algorithm/","name":"README.md","path":"ComputerScience/Algorithm/README.md","url":"/ComputerScience/Algorithm/"},{"sort":4,"permalink":"/Programming/Rust/","layout":"default","title":"Rust","content":"<h1 id=\"rust\">Rust</h1>\n","dir":"/Programming/Rust/","name":"README.md","path":"Programming/Rust/README.md","url":"/Programming/Rust/"},{"sort":5,"permalink":"/Project/","layout":"default","title":"Project","content":"<h1 id=\"project\">Project</h1>\n<h2 id=\"list\"><strong>List</strong></h2>\n\n<table>\n <thead>\n <tr>\n <th>Name</th>\n <th>stack</th>\n <th>repo</th>\n </tr>\n </thead>\n <tbody>\n <tr>\n <td>DockerForWeb</td>\n <td>Golang, go-gin</td>\n <td>https://github.com/Jack-R-lantern/DockerForWeb</td>\n </tr>\n <tr>\n <td>DevelopmentEnvironment</td>\n <td>Docker, Linux</td>\n <td>https://github.com/Jack-R-lantern/DevelopmentEnvironment</td>\n </tr>\n </tbody>\n</table>\n","dir":"/Project/","name":"README.md","path":"Project/README.md","url":"/Project/"},{"sort":6,"permalink":"/OpenSource/","layout":"default","title":"OpenSource","content":"<h1 id=\"opensource\">OpenSource</h1>\n","dir":"/OpenSource/","name":"README.md","path":"OpenSource/README.md","url":"/OpenSource/"}]